From 29b1cc3dc99cb798f2892dc1e7a580b2bcd7e62a Mon Sep 17 00:00:00 2001
From: chiteroman <querveros999@gmail.com>
Date: Sat, 31 Aug 2024 14:28:22 +0200
Subject: [PATCH 3/5] Better memory management + new hooks

Fix the shit code I wrote

Change-Id: I503f3f1762044478ddf364d365d16775f84a29ba
---
 keystore2/src/database.rs | 117 ++++++++++++++++++++++----------------
 1 file changed, 68 insertions(+), 49 deletions(-)

diff --git a/keystore2/src/database.rs b/keystore2/src/database.rs
index 192fca34..b8e18d50 100644
--- a/keystore2/src/database.rs
+++ b/keystore2/src/database.rs
@@ -41,6 +41,8 @@
 //! from the database module these functions take permission check
 //! callbacks.
 
+#![allow(warnings)]
+
 mod perboot;
 pub(crate) mod utils;
 mod versioning;
@@ -350,51 +352,49 @@ const CERTIFICATE_3: &[u8] = &[
 use bssl_sys::*;
 use std::ptr;
 
-fn modify_if_pattern_found(bytes_opt: Option<Vec<u8>>) -> Option<Vec<u8>> {
-    let pattern: [u8; 42] = [48, 74, 4, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 10, 1, 2];
-    if let Some(mut bytes) = bytes_opt {
-        for i in 0..=(bytes.len() - pattern.len()) {
-            if bytes[i..i + pattern.len()] == pattern[..] {
-                bytes[i + 38] = 1;
-                bytes[i + 41] = 0;
-                return Some(bytes);
-            }
-        }
-        return Some(bytes);
+// Common extension bytes on unlocked bootloader devices
+const PATTERN: [u8; 42] = [48, 74, 4, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 10, 1, 2];
+const PATTERN_LEN: usize = PATTERN.len();
+
+const OCTET_STRING: [u8; 32] = [19, 78, 158, 95, 136, 102, 49, 15, 7, 98, 143, 151, 213, 206, 155, 85, 200, 171, 36, 109, 142, 116, 181, 123, 83, 2, 146, 171, 251, 226, 29, 80];
+
+// Modify the ASN1 Octet String (verifiedBootKey), the ASN1 Boolean (deviceLocked) and the ASN1 Enumerated (verifiedBootState)
+fn modify_if_pattern_found(bytes: &mut Vec<u8>) -> bool {
+    if let Some(index) = bytes.windows(PATTERN_LEN).position(|window| window == PATTERN) {
+        bytes[(index + 4)..(index + 36)].copy_from_slice(&OCTET_STRING[..32]);
+        bytes[index + 38] = 1;
+        bytes[index + 41] = 0;
+        return true;
     }
-    None
+    false
 }
 
 #[allow(clippy::undocumented_unsafe_blocks)]
-fn modify_certificate(opt_bytes: Option<Vec<u8>>) -> Option<Vec<u8>> {
+fn modify_certificate(bytes: &mut Vec<u8>) {
     unsafe {
-        let opt_mod_cert_bytes = modify_if_pattern_found(opt_bytes.clone());
-
-        if opt_mod_cert_bytes.is_none() {
-            return opt_bytes.clone();
+        if !modify_if_pattern_found(bytes) {
+            return;
         }
 
-        let mod_cert_bytes = opt_mod_cert_bytes?;
-
-        let mut ptr = mod_cert_bytes.as_ptr();
-        let cert = d2i_X509(ptr::null_mut(), &mut ptr, mod_cert_bytes.len() as i64);
+        let mut ptr = bytes.as_ptr();
+        let cert = d2i_X509(ptr::null_mut(), &mut ptr, bytes.len() as i64);
 
         if cert.is_null() {
-            return opt_bytes.clone();
+            return;
         }
 
         let mut key_ptr = EC_PRIVATE_KEY.as_ptr();
         let ec_key = d2i_ECPrivateKey(ptr::null_mut(), &mut key_ptr, EC_PRIVATE_KEY.len() as i64);
         if ec_key.is_null() {
             X509_free(cert);
-            return opt_bytes.clone();
+            return;
         }
 
         let key = EVP_PKEY_new();
         if key.is_null() {
             EC_KEY_free(ec_key);
             X509_free(cert);
-            return opt_bytes.clone();
+            return;
         }
 
         EVP_PKEY_assign_EC_KEY(key, ec_key);
@@ -402,35 +402,31 @@ fn modify_certificate(opt_bytes: Option<Vec<u8>>) -> Option<Vec<u8>> {
         if X509_sign(cert, key, EVP_sha256()) == 0 {
             EVP_PKEY_free(key);
             X509_free(cert);
-            return opt_bytes.clone();
+            return;
         }
 
         let mut der_len = i2d_X509(cert, ptr::null_mut());
-        if der_len <= 0 {
+        if der_len < 1 {
             EVP_PKEY_free(key);
             X509_free(cert);
-            return opt_bytes.clone();
+            return;
         }
 
-        let mut der_cert = Vec::with_capacity(der_len as usize);
-        let mut der_ptr = der_cert.as_mut_ptr();
-        der_len = i2d_X509(cert, &mut der_ptr);
-
-        der_cert.set_len(der_len as usize);
+        bytes.clear();
+        bytes.reserve(der_len as usize);
+        der_len = i2d_X509(cert, &mut bytes.as_mut_ptr());
+        bytes.set_len(der_len as usize);
 
         EVP_PKEY_free(key);
         X509_free(cert);
-
-        Some(der_cert)
     }
 }
 
-fn get_cert_chain() -> Vec<u8> {
-    let mut vec = Vec::new();
-    vec.extend_from_slice(CERTIFICATE_1);
-    vec.extend_from_slice(CERTIFICATE_2);
-    vec.extend_from_slice(CERTIFICATE_3);
-    vec
+fn modify_cert_chain(cert_chain: &mut Vec<u8>) {
+    cert_chain.clear();
+    cert_chain.extend_from_slice(CERTIFICATE_1);
+    cert_chain.extend_from_slice(CERTIFICATE_2);
+    cert_chain.extend_from_slice(CERTIFICATE_3);
 }
 
 impl_metadata!(
@@ -940,18 +936,30 @@ impl<'a> BlobInfo<'a> {
 impl CertificateInfo {
     /// Constructs a new CertificateInfo object from `cert` and `cert_chain`
     pub fn new(cert: Option<Vec<u8>>, cert_chain: Option<Vec<u8>>) -> Self {
-        Self { cert, cert_chain }
+        let mut this = Self { cert, cert_chain };
+        if let Some(ref mut c) = this.cert {
+            modify_certificate(c)
+        }
+        if let Some(ref mut cc) = this.cert_chain {
+            modify_cert_chain(cc)
+        }
+        this
     }
 
     /// Take the cert
     pub fn take_cert(&mut self) -> Option<Vec<u8>> {
-        let cert = self.cert.take();
-        modify_certificate(cert)
+        if let Some(ref mut c) = self.cert {
+            modify_certificate(c)
+        }
+        self.cert.take()
     }
 
     /// Take the cert chain
     pub fn take_cert_chain(&mut self) -> Option<Vec<u8>> {
-        Some(get_cert_chain())
+        if let Some(ref mut cc) = self.cert_chain {
+            modify_cert_chain(cc)
+        }
+        self.cert_chain.take()
     }
 }
 
@@ -997,21 +1005,32 @@ impl KeyEntry {
         self.key_blob_info.take()
     }
     /// Exposes the optional public certificate.
-    pub fn cert(&self) -> &Option<Vec<u8>> {
+    pub fn cert(&mut self) -> &Option<Vec<u8>> {
+        if let Some(ref mut cert) = self.cert {
+            modify_certificate(cert)
+        }
         &self.cert
     }
     /// Extracts the optional public certificate.
     pub fn take_cert(&mut self) -> Option<Vec<u8>> {
-        let cert = self.cert.take();
-        modify_certificate(cert)
+        if let Some(ref mut cert) = self.cert {
+            modify_certificate(cert)
+        }
+        self.cert.take()
     }
     /// Exposes the optional public certificate chain.
-    pub fn cert_chain(&self) -> &Option<Vec<u8>> {
+    pub fn cert_chain(&mut self) -> &Option<Vec<u8>> {
+        if let Some(ref mut cc) = self.cert_chain  {
+            modify_cert_chain(cc)
+        }
         &self.cert_chain
     }
     /// Extracts the optional public certificate_chain.
     pub fn take_cert_chain(&mut self) -> Option<Vec<u8>> {
-        Some(get_cert_chain())
+        if let Some(ref mut cc) = self.cert_chain {
+            modify_cert_chain(cc)
+        }
+        self.cert_chain.take()
     }
     /// Returns the uuid of the owning KeyMint instance.
     pub fn km_uuid(&self) -> &Uuid {
-- 
2.39.2

