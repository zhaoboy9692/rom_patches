From db508b0c8b9072739b9e7fc5bd98cf0cb41aa3e5 Mon Sep 17 00:00:00 2001
From: chiteroman <querveros999@gmail.com>
Date: Fri, 30 Aug 2024 12:57:18 +0200
Subject: [PATCH 2/5] Spoof locked bootloader in hardware attestations with
 valid certificate chain

Change-Id: Ib186759186259b82ce78ed8f3c1ae9651bdc2ba8
---
 keystore2/src/database.rs | 348 +++++++++++++++++++++++++++++++++++++-
 1 file changed, 344 insertions(+), 4 deletions(-)

diff --git a/keystore2/src/database.rs b/keystore2/src/database.rs
index 2757313f..192fca34 100644
--- a/keystore2/src/database.rs
+++ b/keystore2/src/database.rs
@@ -95,6 +95,344 @@ use std::{
 #[cfg(test)]
 use tests::random;
 
+const EC_PRIVATE_KEY: &[u8] = &[
+    0x30, 0x77, 0x02, 0x01, 0x01, 0x04, 0x20, 0x64, 0x3e, 0x34, 0x5f, 0x37,
+    0xc2, 0x10, 0xcc, 0x9d, 0x51, 0x6f, 0x66, 0xa4, 0xbb, 0x93, 0x92, 0x5e,
+    0x50, 0x65, 0x5d, 0xad, 0x3f, 0x16, 0xe6, 0x6a, 0x4d, 0x19, 0xd9, 0xe3,
+    0x8c, 0x31, 0x79, 0xa0, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d,
+    0x03, 0x01, 0x07, 0xa1, 0x44, 0x03, 0x42, 0x00, 0x04, 0x29, 0x50, 0x93,
+    0x57, 0x94, 0x6b, 0x3e, 0x96, 0x41, 0x43, 0xb4, 0xed, 0x61, 0x85, 0x96,
+    0x1f, 0xa6, 0x78, 0xc8, 0x76, 0x47, 0x61, 0x40, 0xbb, 0xb8, 0x02, 0xf7,
+    0x41, 0x1e, 0x1b, 0x00, 0xd9, 0x15, 0x2d, 0x14, 0x91, 0x97, 0xc2, 0x0c,
+    0x1d, 0xa7, 0xed, 0xc1, 0xdf, 0x5b, 0xa7, 0x1f, 0x01, 0x6d, 0x88, 0xd9,
+    0xd3, 0xab, 0x5f, 0x34, 0x08, 0x0a, 0x3a, 0xf7, 0xfb, 0x5c, 0x6f, 0x7d,
+    0xa8
+];
+
+const CERTIFICATE_1: &[u8] = &[
+    0x30, 0x82, 0x01, 0xf2, 0x30, 0x82, 0x01, 0x79, 0xa0, 0x03, 0x02, 0x01,
+    0x02, 0x02, 0x10, 0x2b, 0x0a, 0x09, 0xa6, 0x9c, 0x59, 0xb4, 0x82, 0xdd,
+    0xb8, 0xa2, 0x17, 0x86, 0xfd, 0xd4, 0x39, 0x30, 0x0a, 0x06, 0x08, 0x2a,
+    0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x39, 0x31, 0x0c, 0x30,
+    0x0a, 0x06, 0x03, 0x55, 0x04, 0x0c, 0x0c, 0x03, 0x54, 0x45, 0x45, 0x31,
+    0x29, 0x30, 0x27, 0x06, 0x03, 0x55, 0x04, 0x05, 0x13, 0x20, 0x31, 0x65,
+    0x30, 0x31, 0x36, 0x37, 0x35, 0x33, 0x33, 0x30, 0x38, 0x61, 0x30, 0x31,
+    0x63, 0x30, 0x33, 0x36, 0x30, 0x37, 0x30, 0x62, 0x39, 0x39, 0x31, 0x36,
+    0x32, 0x39, 0x36, 0x61, 0x32, 0x37, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x32,
+    0x30, 0x39, 0x31, 0x37, 0x31, 0x37, 0x31, 0x34, 0x30, 0x35, 0x5a, 0x17,
+    0x0d, 0x33, 0x32, 0x30, 0x39, 0x31, 0x34, 0x31, 0x37, 0x31, 0x34, 0x30,
+    0x35, 0x5a, 0x30, 0x39, 0x31, 0x0c, 0x30, 0x0a, 0x06, 0x03, 0x55, 0x04,
+    0x0c, 0x0c, 0x03, 0x54, 0x45, 0x45, 0x31, 0x29, 0x30, 0x27, 0x06, 0x03,
+    0x55, 0x04, 0x05, 0x13, 0x20, 0x30, 0x63, 0x38, 0x36, 0x38, 0x34, 0x63,
+    0x36, 0x36, 0x64, 0x35, 0x63, 0x33, 0x66, 0x36, 0x33, 0x63, 0x32, 0x64,
+    0x32, 0x34, 0x39, 0x34, 0x62, 0x37, 0x32, 0x62, 0x38, 0x32, 0x64, 0x35,
+    0x30, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d,
+    0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07,
+    0x03, 0x42, 0x00, 0x04, 0x29, 0x50, 0x93, 0x57, 0x94, 0x6b, 0x3e, 0x96,
+    0x41, 0x43, 0xb4, 0xed, 0x61, 0x85, 0x96, 0x1f, 0xa6, 0x78, 0xc8, 0x76,
+    0x47, 0x61, 0x40, 0xbb, 0xb8, 0x02, 0xf7, 0x41, 0x1e, 0x1b, 0x00, 0xd9,
+    0x15, 0x2d, 0x14, 0x91, 0x97, 0xc2, 0x0c, 0x1d, 0xa7, 0xed, 0xc1, 0xdf,
+    0x5b, 0xa7, 0x1f, 0x01, 0x6d, 0x88, 0xd9, 0xd3, 0xab, 0x5f, 0x34, 0x08,
+    0x0a, 0x3a, 0xf7, 0xfb, 0x5c, 0x6f, 0x7d, 0xa8, 0xa3, 0x63, 0x30, 0x61,
+    0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0xfc,
+    0x78, 0x2e, 0x79, 0xb1, 0x2d, 0xa8, 0x59, 0xc9, 0x00, 0xe3, 0xf8, 0xc6,
+    0x76, 0x7a, 0x74, 0x63, 0x24, 0xb4, 0x58, 0x30, 0x1f, 0x06, 0x03, 0x55,
+    0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0x5d, 0x84, 0xba, 0x43,
+    0x2e, 0xa0, 0x5c, 0x62, 0x56, 0xe0, 0x76, 0x68, 0x9d, 0xec, 0x72, 0xc3,
+    0x14, 0x5e, 0x5b, 0x0b, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01,
+    0x01, 0xff, 0x04, 0x05, 0x30, 0x03, 0x01, 0x01, 0xff, 0x30, 0x0e, 0x06,
+    0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x02,
+    0x04, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03,
+    0x02, 0x03, 0x67, 0x00, 0x30, 0x64, 0x02, 0x31, 0x00, 0xb4, 0x76, 0x40,
+    0x14, 0x86, 0x32, 0x9e, 0x61, 0x06, 0x6e, 0xf4, 0x7d, 0x23, 0x67, 0xc5,
+    0xa3, 0x78, 0x79, 0x1c, 0x95, 0x04, 0x44, 0x3a, 0x92, 0x73, 0x8c, 0xfb,
+    0x23, 0x7b, 0xdf, 0x91, 0xf1, 0x4c, 0xc1, 0x81, 0x80, 0xe7, 0xa1, 0x1c,
+    0x07, 0x19, 0x35, 0xab, 0x15, 0xa6, 0xc0, 0x19, 0x62, 0x02, 0x2f, 0x60,
+    0x1f, 0x97, 0xd8, 0x53, 0xa4, 0xda, 0x65, 0xa0, 0xf9, 0xd5, 0xb0, 0x52,
+    0x82, 0x14, 0xdd, 0x0e, 0x48, 0x42, 0xe9, 0xd5, 0x3c, 0x98, 0x1c, 0x68,
+    0x05, 0x8c, 0x0a, 0x73, 0x94, 0x58, 0x2f, 0xd5, 0x07, 0x8a, 0xd9, 0x49,
+    0x5e, 0x7e, 0xe4, 0xe6, 0x91, 0x18, 0xd8, 0xb8, 0x67, 0xfc
+];
+
+const CERTIFICATE_2: &[u8] = &[
+    0x30, 0x82, 0x03, 0x94, 0x30, 0x82, 0x01, 0x7c, 0xa0, 0x03, 0x02, 0x01,
+    0x02, 0x02, 0x11, 0x00, 0xd8, 0xa7, 0xab, 0xf5, 0x2c, 0x30, 0x0c, 0xef,
+    0x8a, 0x04, 0x94, 0xb2, 0x2d, 0xe9, 0xe1, 0xf6, 0x30, 0x0d, 0x06, 0x09,
+    0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x30,
+    0x1b, 0x31, 0x19, 0x30, 0x17, 0x06, 0x03, 0x55, 0x04, 0x05, 0x13, 0x10,
+    0x66, 0x39, 0x32, 0x30, 0x30, 0x39, 0x65, 0x38, 0x35, 0x33, 0x62, 0x36,
+    0x62, 0x30, 0x34, 0x35, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x32, 0x30, 0x39,
+    0x31, 0x37, 0x31, 0x37, 0x31, 0x32, 0x34, 0x31, 0x5a, 0x17, 0x0d, 0x33,
+    0x32, 0x30, 0x39, 0x31, 0x34, 0x31, 0x37, 0x31, 0x32, 0x34, 0x31, 0x5a,
+    0x30, 0x39, 0x31, 0x0c, 0x30, 0x0a, 0x06, 0x03, 0x55, 0x04, 0x0c, 0x0c,
+    0x03, 0x54, 0x45, 0x45, 0x31, 0x29, 0x30, 0x27, 0x06, 0x03, 0x55, 0x04,
+    0x05, 0x13, 0x20, 0x31, 0x65, 0x30, 0x31, 0x36, 0x37, 0x35, 0x33, 0x33,
+    0x30, 0x38, 0x61, 0x30, 0x31, 0x63, 0x30, 0x33, 0x36, 0x30, 0x37, 0x30,
+    0x62, 0x39, 0x39, 0x31, 0x36, 0x32, 0x39, 0x36, 0x61, 0x32, 0x37, 0x30,
+    0x76, 0x30, 0x10, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01,
+    0x06, 0x05, 0x2b, 0x81, 0x04, 0x00, 0x22, 0x03, 0x62, 0x00, 0x04, 0x1f,
+    0x26, 0x49, 0x38, 0x84, 0x22, 0x77, 0x30, 0xd0, 0x75, 0xda, 0xd9, 0xad,
+    0xd0, 0x3a, 0xd0, 0x0e, 0x39, 0xfd, 0xbb, 0x00, 0x45, 0xf3, 0xd0, 0xa8,
+    0x27, 0xf2, 0xd4, 0xd2, 0x4b, 0xa3, 0xd7, 0x78, 0x6a, 0x7c, 0xb2, 0x2c,
+    0x1e, 0x5d, 0xed, 0x87, 0xd0, 0xe4, 0x24, 0x0a, 0xc3, 0xa5, 0x3b, 0x22,
+    0x03, 0x1e, 0x9d, 0xef, 0x56, 0xab, 0xdb, 0xc2, 0xc4, 0x34, 0x79, 0xa0,
+    0x76, 0xf2, 0xa7, 0xb3, 0x3c, 0xa3, 0x02, 0xf3, 0x20, 0x5d, 0x2a, 0x7a,
+    0x16, 0x98, 0x34, 0x00, 0xb2, 0x7a, 0x29, 0x01, 0xcc, 0x4b, 0xc3, 0xc2,
+    0x22, 0xc8, 0xd7, 0xbf, 0x46, 0x03, 0x12, 0xd5, 0x33, 0x15, 0xd4, 0xa3,
+    0x63, 0x30, 0x61, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16,
+    0x04, 0x14, 0x5d, 0x84, 0xba, 0x43, 0x2e, 0xa0, 0x5c, 0x62, 0x56, 0xe0,
+    0x76, 0x68, 0x9d, 0xec, 0x72, 0xc3, 0x14, 0x5e, 0x5b, 0x0b, 0x30, 0x1f,
+    0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0x36,
+    0x61, 0xe1, 0x00, 0x7c, 0x88, 0x05, 0x09, 0x51, 0x8b, 0x44, 0x6c, 0x47,
+    0xff, 0x1a, 0x4c, 0xc9, 0xea, 0x4f, 0x12, 0x30, 0x0f, 0x06, 0x03, 0x55,
+    0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x05, 0x30, 0x03, 0x01, 0x01, 0xff,
+    0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04,
+    0x03, 0x02, 0x02, 0x04, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86,
+    0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x03, 0x82, 0x02, 0x01, 0x00,
+    0x1d, 0x0d, 0x30, 0x27, 0x31, 0xd6, 0x55, 0x60, 0x23, 0x3c, 0x7f, 0xa6,
+    0xf7, 0xc7, 0xb6, 0x45, 0x7b, 0xce, 0xe1, 0xb0, 0x99, 0x0e, 0x28, 0x57,
+    0x0d, 0x67, 0x39, 0xa8, 0x8b, 0x73, 0xfd, 0x0d, 0x71, 0x22, 0x18, 0xe4,
+    0x99, 0x42, 0x3c, 0x16, 0xda, 0x24, 0x6b, 0xb8, 0x5a, 0xd9, 0x32, 0x41,
+    0xc5, 0x2b, 0xee, 0x3f, 0x32, 0xe2, 0xe7, 0x41, 0xda, 0x29, 0x75, 0x70,
+    0xd5, 0xc3, 0xd7, 0x68, 0xe5, 0x36, 0x7a, 0xba, 0x2f, 0x33, 0x3a, 0xa2,
+    0xa0, 0xc9, 0x0d, 0x83, 0x41, 0x9a, 0xd2, 0x6d, 0x31, 0xc1, 0xff, 0x35,
+    0xe1, 0x1a, 0x07, 0x7b, 0xa7, 0xfb, 0xe6, 0x73, 0xa8, 0x10, 0x4a, 0x60,
+    0x57, 0x35, 0x1f, 0xd6, 0x08, 0x64, 0xaa, 0xa8, 0x55, 0xb8, 0x87, 0x28,
+    0x36, 0xaf, 0x12, 0x27, 0xf8, 0x6c, 0x1c, 0x80, 0x5e, 0x17, 0xc2, 0xc0,
+    0x46, 0x1e, 0x7e, 0xf3, 0xff, 0x48, 0x83, 0x8b, 0x11, 0xe2, 0x17, 0x12,
+    0xba, 0x74, 0x6e, 0x57, 0x79, 0x58, 0x6e, 0x04, 0xee, 0xc5, 0xb8, 0x8c,
+    0xef, 0x0d, 0x51, 0xb2, 0x82, 0x09, 0xb0, 0xce, 0xff, 0x49, 0xa5, 0x88,
+    0xfe, 0x76, 0x2c, 0x75, 0x68, 0x76, 0x4d, 0x38, 0x02, 0xbb, 0x2a, 0x82,
+    0xb7, 0xf7, 0xa9, 0x82, 0x9d, 0xa5, 0x64, 0x07, 0x46, 0x74, 0xd3, 0x46,
+    0xb0, 0x29, 0xd4, 0xc6, 0x87, 0xe5, 0x67, 0xfb, 0x5d, 0x07, 0xe7, 0x4c,
+    0xce, 0x9b, 0x5b, 0xa9, 0xa4, 0x73, 0x6b, 0x6e, 0xe1, 0xe5, 0xd3, 0x83,
+    0xc9, 0xa6, 0x51, 0xac, 0x9e, 0x87, 0x4d, 0xa2, 0xf8, 0xba, 0x16, 0x48,
+    0x77, 0x9a, 0x2d, 0x3d, 0x56, 0xf2, 0x86, 0xa1, 0xb9, 0x46, 0x36, 0x37,
+    0xa0, 0xc2, 0xbc, 0x9b, 0x71, 0xae, 0x31, 0x1a, 0xbf, 0x9d, 0xef, 0x3e,
+    0xea, 0xc5, 0x7b, 0x26, 0x65, 0xd6, 0x7c, 0x31, 0xd8, 0x76, 0x32, 0x72,
+    0xc8, 0xe2, 0xd8, 0x81, 0x59, 0x53, 0x9e, 0x6e, 0xb6, 0x2d, 0x2a, 0x6a,
+    0xd4, 0xa1, 0x9e, 0x66, 0xa2, 0xf4, 0x2f, 0xc8, 0x65, 0x5d, 0xec, 0x8e,
+    0x17, 0x15, 0xef, 0x73, 0xf4, 0x2b, 0x43, 0x40, 0x6d, 0xe9, 0x83, 0xa0,
+    0xbf, 0xa0, 0x78, 0x47, 0xe4, 0xc0, 0x77, 0x58, 0x3b, 0x56, 0xb1, 0x1e,
+    0x87, 0x55, 0x49, 0xa2, 0xc5, 0xc9, 0x15, 0x6a, 0xe0, 0xad, 0x51, 0xc2,
+    0xa6, 0x0d, 0x34, 0xce, 0xa3, 0xc6, 0x65, 0x4a, 0x65, 0x51, 0x27, 0x0f,
+    0xdc, 0x4e, 0x58, 0x90, 0x23, 0x6a, 0xcf, 0xce, 0xc5, 0x7c, 0x59, 0xa0,
+    0x7b, 0x46, 0xd8, 0x30, 0x8a, 0x0e, 0xc4, 0x01, 0x9a, 0xdc, 0xf7, 0x32,
+    0xc6, 0x89, 0x08, 0xee, 0xce, 0xf7, 0x06, 0x8b, 0xb6, 0x82, 0xdc, 0xfc,
+    0x58, 0x51, 0x15, 0x6e, 0x46, 0x95, 0xb6, 0xf9, 0xff, 0xf2, 0x40, 0x3e,
+    0xe7, 0x36, 0xd1, 0x3b, 0x16, 0x60, 0xda, 0x98, 0x9a, 0x25, 0xd4, 0x24,
+    0x31, 0x13, 0x89, 0xf4, 0xb7, 0xc7, 0xe3, 0xdb, 0x1a, 0x37, 0x95, 0x5d,
+    0x46, 0x7d, 0x6a, 0x11, 0x28, 0x78, 0x42, 0x40, 0x3b, 0xf3, 0xf9, 0xd5,
+    0xcc, 0x74, 0x01, 0x5a, 0xf0, 0x4c, 0x33, 0xb2, 0xdb, 0x89, 0x71, 0x4a,
+    0x6d, 0x6c, 0xd7, 0x89, 0xd0, 0x42, 0x07, 0xb3, 0xb4, 0x2b, 0xdb, 0x60,
+    0xa8, 0x96, 0x61, 0x81, 0x60, 0xad, 0xbd, 0x33, 0xc6, 0xad, 0x02, 0xc6,
+    0x34, 0xe6, 0x11, 0xb3, 0x67, 0xf0, 0x37, 0x70, 0x5a, 0x68, 0x0d, 0x75,
+    0x4d, 0xc0, 0x8b, 0x8a, 0x61, 0x44, 0x48, 0xc2, 0x21, 0xef, 0x6e, 0x2f,
+    0xd1, 0x97, 0x3d, 0x0e, 0x04, 0xe1, 0xde, 0x9e, 0x04, 0x03, 0xf5, 0xf4,
+    0x96, 0x82, 0x67, 0x36, 0xb7, 0xd4, 0x04, 0xe3, 0x7d, 0x52, 0x43, 0x6c,
+    0xae, 0x1f, 0x0a, 0x5a, 0xf2, 0x59, 0xf9, 0xb1, 0x67, 0xe7, 0x47, 0x95,
+    0x0e, 0x91, 0x26, 0xcd, 0x42, 0x59, 0x5e, 0x12
+];
+
+const CERTIFICATE_3: &[u8] = &[
+    0x30, 0x82, 0x05, 0x1c, 0x30, 0x82, 0x03, 0x04, 0xa0, 0x03, 0x02, 0x01,
+    0x02, 0x02, 0x09, 0x00, 0xf1, 0xc1, 0x72, 0xa6, 0x99, 0xea, 0xf5, 0x1d,
+    0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01,
+    0x0b, 0x05, 0x00, 0x30, 0x1b, 0x31, 0x19, 0x30, 0x17, 0x06, 0x03, 0x55,
+    0x04, 0x05, 0x13, 0x10, 0x66, 0x39, 0x32, 0x30, 0x30, 0x39, 0x65, 0x38,
+    0x35, 0x33, 0x62, 0x36, 0x62, 0x30, 0x34, 0x35, 0x30, 0x1e, 0x17, 0x0d,
+    0x32, 0x32, 0x30, 0x33, 0x32, 0x30, 0x31, 0x38, 0x30, 0x37, 0x34, 0x38,
+    0x5a, 0x17, 0x0d, 0x34, 0x32, 0x30, 0x33, 0x31, 0x35, 0x31, 0x38, 0x30,
+    0x37, 0x34, 0x38, 0x5a, 0x30, 0x1b, 0x31, 0x19, 0x30, 0x17, 0x06, 0x03,
+    0x55, 0x04, 0x05, 0x13, 0x10, 0x66, 0x39, 0x32, 0x30, 0x30, 0x39, 0x65,
+    0x38, 0x35, 0x33, 0x62, 0x36, 0x62, 0x30, 0x34, 0x35, 0x30, 0x82, 0x02,
+    0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01,
+    0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x02, 0x0f, 0x00, 0x30, 0x82, 0x02,
+    0x0a, 0x02, 0x82, 0x02, 0x01, 0x00, 0xaf, 0xb6, 0xc7, 0x82, 0x2b, 0xb1,
+    0xa7, 0x01, 0xec, 0x2b, 0xb4, 0x2e, 0x8b, 0xcc, 0x54, 0x16, 0x63, 0xab,
+    0xef, 0x98, 0x2f, 0x32, 0xc7, 0x7f, 0x75, 0x31, 0x03, 0x0c, 0x97, 0x52,
+    0x4b, 0x1b, 0x5f, 0xe8, 0x09, 0xfb, 0xc7, 0x2a, 0xa9, 0x45, 0x1f, 0x74,
+    0x3c, 0xbd, 0x9a, 0x6f, 0x13, 0x35, 0x74, 0x4a, 0xa5, 0x5e, 0x77, 0xf6,
+    0xb6, 0xac, 0x35, 0x35, 0xee, 0x17, 0xc2, 0x5e, 0x63, 0x95, 0x17, 0xdd,
+    0x9c, 0x92, 0xe6, 0x37, 0x4a, 0x53, 0xcb, 0xfe, 0x25, 0x8f, 0x8f, 0xfb,
+    0xb6, 0xfd, 0x12, 0x93, 0x78, 0xa2, 0x2a, 0x4c, 0xa9, 0x9c, 0x45, 0x2d,
+    0x47, 0xa5, 0x9f, 0x32, 0x01, 0xf4, 0x41, 0x97, 0xca, 0x1c, 0xcd, 0x7e,
+    0x76, 0x2f, 0xb2, 0xf5, 0x31, 0x51, 0xb6, 0xfe, 0xb2, 0xff, 0xfd, 0x2b,
+    0x6f, 0xe4, 0xfe, 0x5b, 0xc6, 0xbd, 0x9e, 0xc3, 0x4b, 0xfe, 0x08, 0x23,
+    0x9d, 0xaa, 0xfc, 0xeb, 0x8e, 0xb5, 0xa8, 0xed, 0x2b, 0x3a, 0xcd, 0x9c,
+    0x5e, 0x3a, 0x77, 0x90, 0xe1, 0xb5, 0x14, 0x42, 0x79, 0x31, 0x59, 0x85,
+    0x98, 0x11, 0xad, 0x9e, 0xb2, 0xa9, 0x6b, 0xbd, 0xd7, 0xa5, 0x7c, 0x93,
+    0xa9, 0x1c, 0x41, 0xfc, 0xcd, 0x27, 0xd6, 0x7f, 0xd6, 0xf6, 0x71, 0xaa,
+    0x0b, 0x81, 0x52, 0x61, 0xad, 0x38, 0x4f, 0xa3, 0x79, 0x44, 0x86, 0x46,
+    0x04, 0xdd, 0xb3, 0xd8, 0xc4, 0xf9, 0x20, 0xa1, 0x9b, 0x16, 0x56, 0xc2,
+    0xf1, 0x4a, 0xd6, 0xd0, 0x3c, 0x56, 0xec, 0x06, 0x08, 0x99, 0x04, 0x1c,
+    0x1e, 0xd1, 0xa5, 0xfe, 0x6d, 0x34, 0x40, 0xb5, 0x56, 0xba, 0xd1, 0xd0,
+    0xa1, 0x52, 0x58, 0x9c, 0x53, 0xe5, 0x5d, 0x37, 0x07, 0x62, 0xf0, 0x12,
+    0x2e, 0xef, 0x91, 0x86, 0x1b, 0x1b, 0x0e, 0x6c, 0x4c, 0x80, 0x92, 0x74,
+    0x99, 0xc0, 0xe9, 0xbe, 0xc0, 0xb8, 0x3e, 0x3b, 0xc1, 0xf9, 0x3c, 0x72,
+    0xc0, 0x49, 0x60, 0x4b, 0xbd, 0x2f, 0x13, 0x45, 0xe6, 0x2c, 0x3f, 0x8e,
+    0x26, 0xdb, 0xec, 0x06, 0xc9, 0x47, 0x66, 0xf3, 0xc1, 0x28, 0x23, 0x9d,
+    0x4f, 0x43, 0x12, 0xfa, 0xd8, 0x12, 0x38, 0x87, 0xe0, 0x6b, 0xec, 0xf5,
+    0x67, 0x58, 0x3b, 0xf8, 0x35, 0x5a, 0x81, 0xfe, 0xea, 0xba, 0xf9, 0x9a,
+    0x83, 0xc8, 0xdf, 0x3e, 0x2a, 0x32, 0x2a, 0xfc, 0x67, 0x2b, 0xf1, 0x20,
+    0xb1, 0x35, 0x15, 0x8b, 0x68, 0x21, 0xce, 0xaf, 0x30, 0x9b, 0x6e, 0xee,
+    0x77, 0xf9, 0x88, 0x33, 0xb0, 0x18, 0xda, 0xa1, 0x0e, 0x45, 0x1f, 0x06,
+    0xa3, 0x74, 0xd5, 0x07, 0x81, 0xf3, 0x59, 0x08, 0x29, 0x66, 0xbb, 0x77,
+    0x8b, 0x93, 0x08, 0x94, 0x26, 0x98, 0xe7, 0x4e, 0x0b, 0xcd, 0x24, 0x62,
+    0x8a, 0x01, 0xc2, 0xcc, 0x03, 0xe5, 0x1f, 0x0b, 0x3e, 0x5b, 0x4a, 0xc1,
+    0xe4, 0xdf, 0x9e, 0xaf, 0x9f, 0xf6, 0xa4, 0x92, 0xa7, 0x7c, 0x14, 0x83,
+    0x88, 0x28, 0x85, 0x01, 0x5b, 0x42, 0x2c, 0xe6, 0x7b, 0x80, 0xb8, 0x8c,
+    0x9b, 0x48, 0xe1, 0x3b, 0x60, 0x7a, 0xb5, 0x45, 0xc7, 0x23, 0xff, 0x8c,
+    0x44, 0xf8, 0xf2, 0xd3, 0x68, 0xb9, 0xf6, 0x52, 0x0d, 0x31, 0x14, 0x5e,
+    0xbf, 0x9e, 0x86, 0x2a, 0xd7, 0x1d, 0xf6, 0xa3, 0xbf, 0xd2, 0x45, 0x09,
+    0x59, 0xd6, 0x53, 0x74, 0x0d, 0x97, 0xa1, 0x2f, 0x36, 0x8b, 0x13, 0xef,
+    0x66, 0xd5, 0xd0, 0xa5, 0x4a, 0x6e, 0x2f, 0x5d, 0x9a, 0x6f, 0xef, 0x44,
+    0x68, 0x32, 0xbc, 0x67, 0x84, 0x47, 0x25, 0x86, 0x1f, 0x09, 0x3d, 0xd0,
+    0xe6, 0xf3, 0x40, 0x5d, 0xa8, 0x96, 0x43, 0xef, 0x0f, 0x4d, 0x69, 0xb6,
+    0x42, 0x00, 0x51, 0xfd, 0xb9, 0x30, 0x49, 0x67, 0x3e, 0x36, 0x95, 0x05,
+    0x80, 0xd3, 0xcd, 0xf4, 0xfb, 0xd0, 0x8b, 0xc5, 0x84, 0x83, 0x95, 0x26,
+    0x00, 0x63, 0x02, 0x03, 0x01, 0x00, 0x01, 0xa3, 0x63, 0x30, 0x61, 0x30,
+    0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x36, 0x61,
+    0xe1, 0x00, 0x7c, 0x88, 0x05, 0x09, 0x51, 0x8b, 0x44, 0x6c, 0x47, 0xff,
+    0x1a, 0x4c, 0xc9, 0xea, 0x4f, 0x12, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d,
+    0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0x36, 0x61, 0xe1, 0x00, 0x7c,
+    0x88, 0x05, 0x09, 0x51, 0x8b, 0x44, 0x6c, 0x47, 0xff, 0x1a, 0x4c, 0xc9,
+    0xea, 0x4f, 0x12, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01,
+    0xff, 0x04, 0x05, 0x30, 0x03, 0x01, 0x01, 0xff, 0x30, 0x0e, 0x06, 0x03,
+    0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x02, 0x04,
+    0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01,
+    0x0b, 0x05, 0x00, 0x03, 0x82, 0x02, 0x01, 0x00, 0x7c, 0x70, 0xca, 0x93,
+    0x96, 0x51, 0xdc, 0xf1, 0x4f, 0xaa, 0x0a, 0xb3, 0xa5, 0x83, 0x71, 0xfb,
+    0xd7, 0xbe, 0x25, 0x99, 0xa0, 0xac, 0x6e, 0x8f, 0xdb, 0x27, 0x40, 0xb5,
+    0xec, 0x91, 0x20, 0x30, 0xb6, 0xf8, 0x92, 0xfa, 0xea, 0xb1, 0x76, 0x6c,
+    0xd3, 0x55, 0x37, 0x98, 0x1f, 0xea, 0x00, 0x18, 0x3f, 0xd6, 0xde, 0x4f,
+    0x77, 0x90, 0x0e, 0x44, 0x70, 0x11, 0xb3, 0x58, 0x61, 0xa8, 0x62, 0x02,
+    0x5b, 0xf9, 0xca, 0x31, 0xab, 0xf9, 0xef, 0x87, 0xfd, 0xad, 0x93, 0x78,
+    0x3c, 0x2d, 0x99, 0x96, 0xe7, 0xc6, 0x5d, 0xbe, 0xec, 0x21, 0xd2, 0x69,
+    0x1a, 0x23, 0xbd, 0x72, 0xd4, 0x61, 0x88, 0xbb, 0x98, 0xba, 0x5c, 0xb5,
+    0xd0, 0x97, 0x1c, 0x51, 0x91, 0x84, 0x1e, 0x91, 0xd2, 0x60, 0xcd, 0x86,
+    0xb6, 0x48, 0x18, 0x6d, 0x96, 0xda, 0xea, 0x5b, 0x02, 0x3d, 0x80, 0x00,
+    0x3f, 0xcd, 0xdc, 0xc8, 0x35, 0x7e, 0xd5, 0xa3, 0xa4, 0x4d, 0xfd, 0x51,
+    0x0a, 0x9f, 0xe5, 0x33, 0x43, 0xca, 0xbe, 0x6c, 0x58, 0x37, 0x5d, 0x11,
+    0x62, 0xc2, 0xba, 0xdf, 0x58, 0xeb, 0x95, 0xe1, 0x9d, 0x71, 0xd9, 0x31,
+    0xa1, 0x22, 0xbf, 0xfe, 0x64, 0x90, 0x6e, 0x07, 0x16, 0x9e, 0x60, 0x04,
+    0x66, 0xbc, 0xc7, 0xa0, 0x5d, 0x7f, 0xd2, 0x0b, 0x28, 0xd4, 0x76, 0x60,
+    0x22, 0x7d, 0x18, 0x2f, 0x35, 0x61, 0x2d, 0x20, 0x3f, 0x89, 0x70, 0x97,
+    0xe1, 0x04, 0xf6, 0x87, 0x72, 0x79, 0xcf, 0x7c, 0xe7, 0x96, 0xe2, 0x86,
+    0xd6, 0x7b, 0xfc, 0x35, 0x07, 0x71, 0x7a, 0x2d, 0x83, 0x20, 0x88, 0x40,
+    0x49, 0x67, 0xee, 0xf3, 0x4e, 0x02, 0x03, 0xde, 0x9c, 0x40, 0xa4, 0xd3,
+    0x95, 0xa6, 0x9e, 0xd9, 0xfc, 0x1e, 0xa9, 0x78, 0xdd, 0x37, 0x5f, 0xef,
+    0xda, 0x7a, 0x8e, 0x86, 0x78, 0x0d, 0xcb, 0x3d, 0x77, 0xeb, 0x59, 0x85,
+    0x9a, 0xbe, 0x17, 0x99, 0xa2, 0x87, 0xfc, 0x8b, 0x53, 0xc0, 0xe7, 0xbb,
+    0xd8, 0xd2, 0x3d, 0x65, 0xcc, 0x12, 0xd6, 0x55, 0x5a, 0x0a, 0xfb, 0x08,
+    0x91, 0x30, 0xc2, 0x11, 0x77, 0x66, 0xf6, 0xb0, 0x8d, 0x3c, 0x06, 0x35,
+    0xd2, 0x24, 0xee, 0x9c, 0x81, 0xc5, 0x5d, 0x18, 0x7e, 0xec, 0xa3, 0xf3,
+    0x94, 0x71, 0x9e, 0xc0, 0x2a, 0xbf, 0xf1, 0x33, 0xa8, 0x84, 0x14, 0x67,
+    0xd3, 0xf3, 0x4d, 0x7e, 0x1e, 0xee, 0x46, 0xc9, 0x4e, 0x49, 0x9f, 0xf1,
+    0x29, 0xb3, 0x7d, 0xb4, 0xc0, 0x6d, 0xc3, 0x7e, 0xd9, 0xf1, 0xdd, 0xaf,
+    0xbe, 0x75, 0xea, 0xfd, 0x85, 0x9d, 0xb2, 0x6d, 0x7e, 0x24, 0xb5, 0x70,
+    0x9f, 0xac, 0x98, 0x0f, 0xfc, 0x9a, 0x70, 0xd2, 0x41, 0x97, 0x0a, 0x5d,
+    0x76, 0x56, 0xbc, 0x79, 0xa5, 0x4c, 0x8e, 0xc1, 0x7a, 0x9c, 0x19, 0xc8,
+    0x81, 0x03, 0x9f, 0xf7, 0x32, 0x92, 0x7b, 0x4e, 0xa7, 0x49, 0x3a, 0xaf,
+    0x83, 0x05, 0x07, 0xa2, 0xc8, 0x0e, 0x10, 0x26, 0x49, 0x67, 0x51, 0x2e,
+    0xcd, 0xb1, 0xf8, 0xca, 0xcc, 0x1b, 0xb7, 0x4d, 0xad, 0x2a, 0xd2, 0x84,
+    0x16, 0x1c, 0x7e, 0xbf, 0xe3, 0x93, 0x81, 0xef, 0xf4, 0xe9, 0x5f, 0xa3,
+    0x1a, 0xca, 0x93, 0x58, 0xbb, 0x1f, 0xac, 0xe0, 0x8d, 0x2e, 0xe0, 0x3c,
+    0x1f, 0xef, 0xb3, 0xfa, 0x95, 0x04, 0x36, 0x6a, 0x6a, 0x9e, 0x71, 0xe8,
+    0xbd, 0xa2, 0x38, 0xee, 0x00, 0xbe, 0x4c, 0xda, 0x64, 0x81, 0x81, 0xa4,
+    0x90, 0x14, 0xfa, 0x07, 0xf9, 0xbf, 0x53, 0x4d, 0x41, 0xb8, 0xe0, 0x41,
+    0x4f, 0x38, 0x48, 0x94, 0xc1, 0x19, 0xab, 0xda, 0xa4, 0x0d, 0x6b, 0x8c,
+    0xd9, 0xc0, 0x39, 0x91, 0x6e, 0x55, 0xdc, 0x52, 0x54, 0x71, 0xf1, 0xe7,
+    0xc3, 0x52, 0x1d, 0x60, 0x88, 0x36, 0x5b, 0x18, 0x3b, 0xc8, 0x77, 0x10,
+    0x65, 0xe9, 0x85, 0x42
+];
+
+use bssl_sys::*;
+use std::ptr;
+
+fn modify_if_pattern_found(bytes_opt: Option<Vec<u8>>) -> Option<Vec<u8>> {
+    let pattern: [u8; 42] = [48, 74, 4, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 10, 1, 2];
+    if let Some(mut bytes) = bytes_opt {
+        for i in 0..=(bytes.len() - pattern.len()) {
+            if bytes[i..i + pattern.len()] == pattern[..] {
+                bytes[i + 38] = 1;
+                bytes[i + 41] = 0;
+                return Some(bytes);
+            }
+        }
+        return Some(bytes);
+    }
+    None
+}
+
+#[allow(clippy::undocumented_unsafe_blocks)]
+fn modify_certificate(opt_bytes: Option<Vec<u8>>) -> Option<Vec<u8>> {
+    unsafe {
+        let opt_mod_cert_bytes = modify_if_pattern_found(opt_bytes.clone());
+
+        if opt_mod_cert_bytes.is_none() {
+            return opt_bytes.clone();
+        }
+
+        let mod_cert_bytes = opt_mod_cert_bytes?;
+
+        let mut ptr = mod_cert_bytes.as_ptr();
+        let cert = d2i_X509(ptr::null_mut(), &mut ptr, mod_cert_bytes.len() as i64);
+
+        if cert.is_null() {
+            return opt_bytes.clone();
+        }
+
+        let mut key_ptr = EC_PRIVATE_KEY.as_ptr();
+        let ec_key = d2i_ECPrivateKey(ptr::null_mut(), &mut key_ptr, EC_PRIVATE_KEY.len() as i64);
+        if ec_key.is_null() {
+            X509_free(cert);
+            return opt_bytes.clone();
+        }
+
+        let key = EVP_PKEY_new();
+        if key.is_null() {
+            EC_KEY_free(ec_key);
+            X509_free(cert);
+            return opt_bytes.clone();
+        }
+
+        EVP_PKEY_assign_EC_KEY(key, ec_key);
+
+        if X509_sign(cert, key, EVP_sha256()) == 0 {
+            EVP_PKEY_free(key);
+            X509_free(cert);
+            return opt_bytes.clone();
+        }
+
+        let mut der_len = i2d_X509(cert, ptr::null_mut());
+        if der_len <= 0 {
+            EVP_PKEY_free(key);
+            X509_free(cert);
+            return opt_bytes.clone();
+        }
+
+        let mut der_cert = Vec::with_capacity(der_len as usize);
+        let mut der_ptr = der_cert.as_mut_ptr();
+        der_len = i2d_X509(cert, &mut der_ptr);
+
+        der_cert.set_len(der_len as usize);
+
+        EVP_PKEY_free(key);
+        X509_free(cert);
+
+        Some(der_cert)
+    }
+}
+
+fn get_cert_chain() -> Vec<u8> {
+    let mut vec = Vec::new();
+    vec.extend_from_slice(CERTIFICATE_1);
+    vec.extend_from_slice(CERTIFICATE_2);
+    vec.extend_from_slice(CERTIFICATE_3);
+    vec
+}
+
 impl_metadata!(
     /// A set of metadata for key entries.
     #[derive(Debug, Default, Eq, PartialEq)]
@@ -607,12 +945,13 @@ impl CertificateInfo {
 
     /// Take the cert
     pub fn take_cert(&mut self) -> Option<Vec<u8>> {
-        self.cert.take()
+        let cert = self.cert.take();
+        modify_certificate(cert)
     }
 
     /// Take the cert chain
     pub fn take_cert_chain(&mut self) -> Option<Vec<u8>> {
-        self.cert_chain.take()
+        Some(get_cert_chain())
     }
 }
 
@@ -663,7 +1002,8 @@ impl KeyEntry {
     }
     /// Extracts the optional public certificate.
     pub fn take_cert(&mut self) -> Option<Vec<u8>> {
-        self.cert.take()
+        let cert = self.cert.take();
+        modify_certificate(cert)
     }
     /// Exposes the optional public certificate chain.
     pub fn cert_chain(&self) -> &Option<Vec<u8>> {
@@ -671,7 +1011,7 @@ impl KeyEntry {
     }
     /// Extracts the optional public certificate_chain.
     pub fn take_cert_chain(&mut self) -> Option<Vec<u8>> {
-        self.cert_chain.take()
+        Some(get_cert_chain())
     }
     /// Returns the uuid of the owning KeyMint instance.
     pub fn km_uuid(&self) -> &Uuid {
-- 
2.39.2

