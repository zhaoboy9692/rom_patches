From d2a5b917580990c0c9b2b54c5fd886efc6dd9e7f Mon Sep 17 00:00:00 2001
From: Yumi Yukimura <me.cafebabe@gmail.com>
Date: Sun, 4 Aug 2024 00:58:07 +0800
Subject: [PATCH 1/3] recovery: Add support for choosing update from virtiofs

Change-Id: Ia6c62d09a0777799e882ae2d4e4348784584f54f
---
 install/Android.bp                         |  1 +
 install/fuse_install.cpp                   |  2 +-
 install/include/install/fuse_install.h     |  2 +
 install/include/install/virtiofs_install.h | 26 ++++++++++
 install/virtiofs_install.cpp               | 57 ++++++++++++++++++++++
 recovery.cpp                               | 13 ++++-
 recovery_utils/roots.cpp                   |  5 ++
 7 files changed, 104 insertions(+), 2 deletions(-)
 create mode 100644 install/include/install/virtiofs_install.h
 create mode 100644 install/virtiofs_install.cpp

diff --git a/install/Android.bp b/install/Android.bp
index b52ac40e..d193a2f3 100644
--- a/install/Android.bp
+++ b/install/Android.bp
@@ -106,6 +106,7 @@ cc_library_static {
     srcs: [
         "adb_install.cpp",
         "fuse_install.cpp",
+        "virtiofs_install.cpp",
         "install.cpp",
         "snapshot_utils.cpp",
         "wipe_data.cpp",
diff --git a/install/fuse_install.cpp b/install/fuse_install.cpp
index 727419d1..e9aa1045 100644
--- a/install/fuse_install.cpp
+++ b/install/fuse_install.cpp
@@ -57,7 +57,7 @@ static void SetSdcardUpdateBootloaderMessage() {
 }
 
 // Returns the selected filename, or an empty string.
-static std::string BrowseDirectory(const std::string& path, Device* device, RecoveryUI* ui) {
+std::string BrowseDirectory(const std::string& path, Device* device, RecoveryUI* ui) {
   std::unique_ptr<DIR, decltype(&closedir)> d(opendir(path.c_str()), closedir);
   if (!d) {
     PLOG(ERROR) << "error opening " << path;
diff --git a/install/include/install/fuse_install.h b/install/include/install/fuse_install.h
index 7c38d0d9..918dcc15 100644
--- a/install/include/install/fuse_install.h
+++ b/install/include/install/fuse_install.h
@@ -26,6 +26,8 @@
 
 using android::volmgr::VolumeInfo;
 
+std::string BrowseDirectory(const std::string& path, Device* device, RecoveryUI* ui);
+
 // Starts FUSE with the package from |path| as the data source. And installs the package from
 // |FUSE_SIDELOAD_HOST_PATHNAME|. The |path| can point to the location of a package zip file or a
 // block map file with the prefix '@'; e.g. /sdcard/package.zip, @/cache/recovery/block.map.
diff --git a/install/include/install/virtiofs_install.h b/install/include/install/virtiofs_install.h
new file mode 100644
index 00000000..db8726f6
--- /dev/null
+++ b/install/include/install/virtiofs_install.h
@@ -0,0 +1,26 @@
+/*
+ * Copyright (C) 2019 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#pragma once
+
+#include "install/install.h"
+#include "recovery_ui/device.h"
+#include "recovery_ui/ui.h"
+
+InstallResult ApplyFromVirtiofs(Device* device);
+
+// Returns true on success, or false on failure.
+bool InitializeVirtiofs();
diff --git a/install/virtiofs_install.cpp b/install/virtiofs_install.cpp
new file mode 100644
index 00000000..ed26c579
--- /dev/null
+++ b/install/virtiofs_install.cpp
@@ -0,0 +1,57 @@
+/*
+ * Copyright (C) 2019 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "install/fuse_install.h"
+#include "install/virtiofs_install.h"
+
+#include <string>
+
+#include "install/install.h"
+#include "recovery_utils/roots.h"
+
+static constexpr const char* VIRTIOFS_MOUNTPOINT = "/mnt/vendor/shared";
+
+InstallResult ApplyFromVirtiofs(Device* device) {
+  auto ui = device->GetUI();
+
+  std::string path = BrowseDirectory(VIRTIOFS_MOUNTPOINT, device, ui);
+  if (path.empty()) {
+    return INSTALL_NONE;
+  }
+
+  ui->Print("\n-- Install %s ...\n", path.c_str());
+
+  auto package =
+      Package::CreateFilePackage(path, std::bind(&RecoveryUI::SetProgress, ui,
+                                                 std::placeholders::_1));
+  if (package == nullptr) {
+    ui->Print("Failed to open package %s\n", path.c_str());
+    return INSTALL_ERROR;
+  }
+
+  auto result = InstallPackage(package.get(), path, false, 0 /* retry_count */,
+                               device);
+  return result;
+}
+
+bool InitializeVirtiofs() {
+  if (volume_for_mount_point(VIRTIOFS_MOUNTPOINT)) {
+    if (ensure_path_mounted(VIRTIOFS_MOUNTPOINT) == 0) {
+      return true;
+    }
+  }
+  return false;
+}
diff --git a/recovery.cpp b/recovery.cpp
index 9865876f..709b052b 100644
--- a/recovery.cpp
+++ b/recovery.cpp
@@ -47,6 +47,7 @@
 #include "bootloader_message/bootloader_message.h"
 #include "install/adb_install.h"
 #include "install/fuse_install.h"
+#include "install/virtiofs_install.h"
 #include "install/install.h"
 #include "install/snapshot_utils.h"
 #include "install/wipe_data.h"
@@ -212,6 +213,8 @@ static InstallResult apply_update_menu(Device* device, Device::BuiltinAction* re
   std::vector<std::string> items;
 
   const int item_sideload = 0;
+  const int item_virtiofs = 1;
+  unsigned int non_storage_items = 1; // ADB sideload, at least
   std::vector<VolumeInfo> volumes;
 
   InstallResult status = INSTALL_NONE;
@@ -219,6 +222,12 @@ static InstallResult apply_update_menu(Device* device, Device::BuiltinAction* re
   for (;;) {
     items.clear();
     items.push_back("Apply from ADB");
+
+    if (InitializeVirtiofs()) {
+      non_storage_items++;
+      items.push_back("Choose from virtiofs");
+    }
+
     VolumeManager::Instance()->getVolumeInfo(volumes);
     for (auto vol = volumes.begin(); vol != volumes.end(); /* empty */) {
       if (!vol->mMountable) {
@@ -245,8 +254,10 @@ static InstallResult apply_update_menu(Device* device, Device::BuiltinAction* re
 
     if (chosen == item_sideload) {
       status = ApplyFromAdb(device, false /* rescue_mode */, reboot_action);
+    } else if (chosen == item_virtiofs && InitializeVirtiofs()) {
+      status = ApplyFromVirtiofs(device);
     } else {
-      status = ApplyFromStorage(device, volumes[chosen - 1]);
+      status = ApplyFromStorage(device, volumes[chosen - non_storage_items]);
     }
     break;
   }
diff --git a/recovery_utils/roots.cpp b/recovery_utils/roots.cpp
index 5a542fd2..fc69df83 100644
--- a/recovery_utils/roots.cpp
+++ b/recovery_utils/roots.cpp
@@ -385,6 +385,11 @@ int setup_install_mounts() {
       continue;
     }
 
+    // We may load update package from virtiofs mount point.
+    if (entry.mount_point == "/mnt/vendor/shared") {
+      continue;
+    }
+
     if (entry.mount_point == "/tmp" || entry.mount_point == "/cache") {
       if (ensure_path_mounted(entry.mount_point) != 0) {
         LOG(ERROR) << "Failed to mount " << entry.mount_point;
-- 
2.39.2

