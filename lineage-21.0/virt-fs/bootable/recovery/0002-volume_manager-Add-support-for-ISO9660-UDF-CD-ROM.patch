From 4696b8fa0d5e1bfb2db6cb2783d5b8670e39e199 Mon Sep 17 00:00:00 2001
From: Yumi Yukimura <me.cafebabe@gmail.com>
Date: Sat, 10 Aug 2024 03:43:17 +0800
Subject: [PATCH 2/3] volume_manager: Add support for ISO9660/UDF CD-ROM

This commit is squash of the following commits, with improvements:

	Author: Yumi Yukimura <me.cafebabe@gmail.com>
	Date:   Thu Jul 25 03:38:40 2024 +0800

	    volume_manager: Handle USB CDROM that has both filesystem and partition table

	    * Unlike SATA CDROM, USB CDROM has the same major and minor number,
	      and the same block device name (sdX) as USB Disk.
	    * For SATA CDROM, sgdisk_read() would fail, but for USB CDROM it
	      won't fail if partition table is found.
	    * ISO image generated by grub-mkrescue is in such format.

	Author: Chih-Wei Huang <cwhuang@linux.org.tw>
	Date:   Sat Mar 25 16:46:42 2017 +0000

	    volume_manager: support UDF (Universal Disk Format)

	    Refer to https://en.wikipedia.org/wiki/Universal_Disk_Format.

	    [cafebabe: Apply fixups suggested by Luca Stefani]

	Author: Chih-Wei Huang <cwhuang@linux.org.tw>
	Date:   Sat Mar 25 16:45:41 2017 +0000

	    volume_manager: auto mount CDROM

	    Luo Chunbo's ISO9660 support (commit 133632d5) is not complete. Still
	    need to handle block devices with major number of CDROM.

	Author: Luo Chunbo <luochunbo@jidemail.com>
	Date:   Wed May 25 16:16:48 2016 +0800

	    volume_manager: ISO9660 support

	    Ref: T7691

	    [cafebabe: Remove MS_DIRSYNC and utf8 flags which are "Invalid argument", Refactor iso9660::Mount() (Suggested edit by Luca Stefani)]

	    Signed-off-by: Luo Chunbo <luochunbo@jidemail.com>

Change-Id: I92cedc0b23dfc98c874fddee189ec599c409b62f
---
 volume_manager/Android.bp        |  1 +
 volume_manager/Disk.cpp          | 32 ++++++++++++++++----
 volume_manager/Disk.h            |  2 ++
 volume_manager/PublicVolume.cpp  |  8 +++++
 volume_manager/VolumeManager.cpp |  3 ++
 volume_manager/fs/Iso9660.cpp    | 51 ++++++++++++++++++++++++++++++++
 volume_manager/fs/Iso9660.h      | 36 ++++++++++++++++++++++
 7 files changed, 127 insertions(+), 6 deletions(-)
 create mode 100644 volume_manager/fs/Iso9660.cpp
 create mode 100644 volume_manager/fs/Iso9660.h

diff --git a/volume_manager/Android.bp b/volume_manager/Android.bp
index e3867218..2d546079 100644
--- a/volume_manager/Android.bp
+++ b/volume_manager/Android.bp
@@ -31,6 +31,7 @@ cc_library_shared {
         "fs/Exfat.cpp",
         "fs/Ext4.cpp",
         "fs/F2fs.cpp",
+        "fs/Iso9660.cpp",
         "fs/Ntfs.cpp",
         "fs/Vfat.cpp",
     ],
diff --git a/volume_manager/Disk.cpp b/volume_manager/Disk.cpp
index 79a0ddc3..c47adeed 100644
--- a/volume_manager/Disk.cpp
+++ b/volume_manager/Disk.cpp
@@ -70,6 +70,7 @@ static const unsigned int kMajorBlockScsiP = 135;
 static const unsigned int kMajorBlockMmc = 179;
 static const unsigned int kMajorBlockExperimentalMin = 240;
 static const unsigned int kMajorBlockExperimentalMax = 254;
+static const unsigned int kMajorBlockCdrom = 11;
 
 static const char* kGptBasicData = "EBD0A0A2-B9E5-4433-87C0-68B6B72699C7";
 static const char* kGptLinuxFilesystem = "0FC63DAF-8483-4772-8E79-3D69D8477DE4";
@@ -205,6 +206,9 @@ status_t Disk::readMetadata() {
             mLabel = "Virtual";
             break;
         }
+        case kMajorBlockCdrom:
+             LOG(DEBUG) << "Found a CDROM: " << mSysPath;
+             FALLTHROUGH_INTENDED;
         case kMajorBlockScsiA:
         case kMajorBlockScsiB:
         case kMajorBlockScsiC:
@@ -277,6 +281,12 @@ status_t Disk::readMetadata() {
 }
 
 status_t Disk::readPartitions() {
+    sgdisk_partition_table ptbl;
+    std::vector<sgdisk_partition> partitions;
+    int res;
+    Table table = Table::kUnknown;
+    bool foundParts = false;
+
     int8_t maxMinors = getMaxMinors();
     if (maxMinors < 0) {
         return -ENOTSUP;
@@ -290,19 +300,25 @@ status_t Disk::readPartitions() {
 
     destroyAllVolumes();
 
+    if (!maxMinors) {
+        std::string cdFsType, cdUnused;
+        if (ReadMetadataUntrusted(mDevPath, cdFsType, cdUnused, cdUnused) == OK) {
+            if (cdFsType == "iso9660" || cdFsType == "udf") {
+                LOG(INFO) << "Detect " << cdFsType;
+                goto treat_disk_as_partition;
+            }
+        }
+    }
+
     // Parse partition table
-    sgdisk_partition_table ptbl;
-    std::vector<sgdisk_partition> partitions;
-    int res = sgdisk_read(mDevPath.c_str(), ptbl, partitions);
+    res = sgdisk_read(mDevPath.c_str(), ptbl, partitions);
     if (res != 0) {
         LOG(WARNING) << "sgdisk failed to scan " << mDevPath;
+
         VolumeManager::Instance()->notifyEvent(ResponseCode::DiskScanned);
         return res;
     }
 
-    Table table = Table::kUnknown;
-    bool foundParts = false;
-
     switch (ptbl.type) {
         case MBR:
             table = Table::kMbr;
@@ -341,6 +357,7 @@ status_t Disk::readPartitions() {
         }
     }
 
+treat_disk_as_partition:
     // Ugly last ditch effort, treat entire disk as partition
     if (table == Table::kUnknown || !foundParts) {
         LOG(WARNING) << mId << " has unknown partition table; trying entire device";
@@ -396,6 +413,9 @@ int Disk::getMaxMinors() {
             // Per Documentation/devices.txt this is static
             return 15;
         }
+        case kMajorBlockCdrom: {
+            return 0;
+        }
         case kMajorBlockMmc: {
             // Per Documentation/devices.txt this is dynamic
             std::string tmp;
diff --git a/volume_manager/Disk.h b/volume_manager/Disk.h
index af86f6d5..d38053d9 100644
--- a/volume_manager/Disk.h
+++ b/volume_manager/Disk.h
@@ -57,6 +57,8 @@ class Disk {
         kEmmc = 1 << 4,
         /* Flag that disk is non-removable */
         kNonRemovable = 1 << 5,
+        /* Flag that disk is CDROM */
+        kCdrom = 1 << 6,
     };
 
     const std::string& getId() { return mId; }
diff --git a/volume_manager/PublicVolume.cpp b/volume_manager/PublicVolume.cpp
index 8fb3b960..b04135fd 100644
--- a/volume_manager/PublicVolume.cpp
+++ b/volume_manager/PublicVolume.cpp
@@ -22,6 +22,7 @@
 #include "fs/Exfat.h"
 #include "fs/Ext4.h"
 #include "fs/F2fs.h"
+#include "fs/Iso9660.h"
 #include "fs/Ntfs.h"
 #include "fs/Vfat.h"
 
@@ -59,6 +60,11 @@ status_t PublicVolume::readMetadata() {
     status_t res = ReadMetadataUntrusted(mDevPath, mFsType, mFsUuid, label);
     if (!label.empty()) {
         setPartLabel(label);
+        // iso9660 has no UUID, we use label as UUID
+        if ((mFsType == "iso9660" || mFsType == "udf") && mFsUuid.empty() && !label.empty()) {
+            std::replace(label.begin(), label.end(), ' ', '_');
+            mFsUuid = label;
+        }
     }
     VolumeManager::Instance()->notifyEvent(ResponseCode::VolumeFsTypeChanged, mFsType);
     VolumeManager::Instance()->notifyEvent(ResponseCode::VolumeFsUuidChanged, mFsUuid);
@@ -104,6 +110,8 @@ status_t PublicVolume::doMount() {
         ret = ext4::Mount(mDevPath, getPath(), false, false, true, mMntOpts, false, true);
     } else if (mFsType == "f2fs") {
         ret = f2fs::Mount(mDevPath, getPath(), mMntOpts, false, true);
+    } else if (mFsType == "iso9660" || mFsType == "udf") {
+        ret = iso9660::Mount(mDevPath, getPath(), AID_MEDIA_RW, AID_MEDIA_RW);
     } else if (mFsType == "ntfs") {
         ret =
             ntfs::Mount(mDevPath, getPath(), false, false, false, AID_MEDIA_RW, AID_MEDIA_RW, 0007);
diff --git a/volume_manager/VolumeManager.cpp b/volume_manager/VolumeManager.cpp
index ded6565b..11e6b9e2 100644
--- a/volume_manager/VolumeManager.cpp
+++ b/volume_manager/VolumeManager.cpp
@@ -45,6 +45,7 @@ struct selabel_handle* sehandle;
 using android::fs_mgr::Fstab;
 using android::fs_mgr::FstabEntry;
 
+static const unsigned int kMajorBlockCdrom = 11;
 static const unsigned int kMajorBlockMmc = 179;
 static const unsigned int kMajorBlockExperimentalMin = 240;
 static const unsigned int kMajorBlockExperimentalMax = 254;
@@ -305,6 +306,8 @@ void VolumeManager::handleBlockEvent(NetlinkEvent* evt) {
                         (IsRunningInEmulator() && major >= (int)kMajorBlockExperimentalMin &&
                          major <= (int)kMajorBlockExperimentalMax)) {
                         flags |= Disk::Flags::kSd;
+                    } else if (major == kMajorBlockCdrom) {
+                        flags |= Disk::Flags::kCdrom;
                     } else {
                         flags |= Disk::Flags::kUsb;
                     }
diff --git a/volume_manager/fs/Iso9660.cpp b/volume_manager/fs/Iso9660.cpp
new file mode 100644
index 00000000..5f3e4f4d
--- /dev/null
+++ b/volume_manager/fs/Iso9660.cpp
@@ -0,0 +1,51 @@
+/*
+ * Copyright (C) 2008 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include <stdio.h>
+#include <sys/mount.h>
+#include <utils/Errors.h>
+#include <android-base/stringprintf.h>
+#include "Iso9660.h"
+#include "Utils.h"
+
+namespace android {
+namespace volmgr {
+namespace iso9660 {
+
+bool IsIso9660Supported() {
+    return IsFilesystemSupported("iso9660");
+}
+
+bool IsUdfSupported() {
+    return IsFilesystemSupported("udf");
+}
+
+status_t Mount(const std::string& source, const std::string& target,
+        int ownerUid, int ownerGid ) {
+    int mountFlags = MS_NODEV | MS_NOEXEC | MS_NOSUID | MS_RDONLY;
+    auto mountData = android::base::StringPrintf("uid=%d,gid=%d", ownerUid, ownerGid);
+    if (mount(source.c_str(), target.c_str(), "iso9660", mountFlags, mountData.c_str()) == 0) {
+        return 0;
+    }
+    if (mount(source.c_str(), target.c_str(), "udf", mountFlags, mountData.c_str()) == 0) {
+        return 0;
+    }
+    return -1;
+}
+
+}  // namespace iso9660
+}  // namespace vold
+}  // namespace android
diff --git a/volume_manager/fs/Iso9660.h b/volume_manager/fs/Iso9660.h
new file mode 100644
index 00000000..d0eb37ac
--- /dev/null
+++ b/volume_manager/fs/Iso9660.h
@@ -0,0 +1,36 @@
+/*
+ * Copyright (C) 2008 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef _ISO9660_H
+#define _ISO9660_H
+
+#include <string>
+
+namespace android {
+namespace volmgr {
+namespace iso9660 {
+
+bool IsIso9660Supported();
+bool IsUdfSupported();
+status_t Mount(const std::string& source, const std::string& target,
+        int ownerUid, int ownerGid );
+
+}  // namespace iso9660
+}  // namespace vold
+}  // namespace android
+
+
+#endif
-- 
2.39.2

